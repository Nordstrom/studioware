--- /usr/sbin/sepkg	2011-09-10 07:25:26.000000000 +0100
+++ sepkg	2011-09-24 11:30:05.000000000 +0100
@@ -3,6 +3,7 @@
 #{{{ Copyright
 # Studioware package building script
 # Copyright 2011 David Woodfall <dave@dawoodfall.net>
+# some modification 2011 James Purdy <james@studioware.org>
 # All rights reserved.
 #
 # Redistribution and use of this script, with or without modification, is
@@ -25,23 +26,36 @@
 #{{{ Init 
 init()
 {
+    # Initial configuration
     APPNAME="sepkg"
     VERSION="1.2"
+    CONFDIR=${CONFDIR:-/etc/$APPNAME}
+    mkdir -p $CONFDIR
+    CONF=$CONFDIR/$APPNAME.conf
+    touch $CONF
+    source $CONF
+    CACHEDIR=${CACHEDIR:-"/var/cache/$APPNAME/$SWVERSION"}
+    SBSERVER=${SBSERVER:-"http://www.studioware.org/slackbuilds/$SWVERSION"}
+    FILELIST=$CACHEDIR/SLACKBUILDS.TXT
+
+    # Created needed folders
+    mkdir -p $CACHEDIR
+    if [ ! -z $SCACHEDIR ] ; then
+        mkdir -p $SCACHEDIR
+    fi
+    if [ ! -z $SBCACHEDIR ] ; then
+        mkdir -p $SBCACHEDIR
+    fi
+    
+    # Set up temp build dir, trap some signals
     TMPROOT=$(mktemp -d -p /tmp $APPNAME-XXXXXX) || exit
-    trap "cleanup" HUP INT ABRT QUIT SEGV TERM KILL PIPE STOP TSTP
     QUEUE=$TMPROOT/queue
     PKGLIST=$TMPROOT/pkglist
+    trap "cleanup" HUP INT ABRT QUIT SEGV TERM KILL PIPE STOP TSTP
+
+    # Command aliases
     WGET="wget --no-check-certificate"
     UP="upgradepkg --reinstall --install-new"
-    CONFDIR=/etc/$APPNAME/
-    mkdir -p $CONFDIR
-    CONF=$CONFDIR/$APPNAME.conf
-    touch $CONF
-    source $CONF 
-    SBSERVER="http://www.studioware.org/slackbuilds/$SWVERSION"
-    CACHEDIR=/var/cache/$APPNAME/$SWVERSION
-    mkdir -p $CACHEDIR
-    FILELIST=$CACHEDIR/SLACKBUILDS.TXT
 }
 #}}}
 #{{{ Cleanup and exit
@@ -62,7 +76,7 @@
     if [ "$1" = "b" ]; then { INSTALL=0; listpkgs "$@"; cleanup; }; fi
     if [ "$1" = "install" ]; then { INSTALL=1; listpkgs "$@"; cleanup; }; fi
     if [ "$1" = "i" ]; then { INSTALL=1; listpkgs "$@"; cleanup; }; fi
-    if [ "$1" = "delete-cache" ]; then { deletecache; cleanup; }; fi
+    if [ "$1" = "delete-cache" ]; then { deletecache "$@"; cleanup; }; fi
     if [ "$1" = "latest" ]; then { latest; cleanup; }; fi
     if [ "$1" = "l" ]; then { latest; cleanup; }; fi
     if [ "$1" = "read" ]; then { readme $2; cleanup; }; fi
@@ -116,7 +130,7 @@
 Options
 
 $APPNAME build/b package1, package2 ... - build packages
-$APPNAME delete-cache - delete all cached files
+$APPNAME delete-cache [all] - delete [all] cached files
 $APPNAME install/i package1, package2 ... - build & install packages
 $APPNAME install/i < <queuefile> - install packages from file
 $APPNAME latest/l - checks for newer version of $APPNAME
@@ -177,9 +191,19 @@
 
     if [ -z "$INSTALLLIST" ]; then cleanup; fi
 
-    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
-        --checklist "Choose packages to install:" \
-        19 70 13 $INSTALLLIST 2>$PKGLIST
+    if [ $AUTOBUILD -eq "1" ]; then
+        # make installist into pkglist, warning: generous grepping may cause
+	# too many packages to be built.
+        for i in $pkgs
+        do
+            echo "$i" >> $PKGLIST
+        done
+    else
+        dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
+            --checklist "Choose packages to install:" \
+            19 70 13 $INSTALLLIST 2>$PKGLIST
+    fi
+
     if [ $? -ne 0 ]; then cleanup; fi
     if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi
     installpkgs
@@ -200,13 +224,23 @@
     do
         if [ -n "$i" ]; then
             b=$(basename $i .tar.gz)
-             $WGET -c -O $b.tar.gz $SBSERVER/$i
+	     if [ -d $SBCACHEDIR ]; then
+                 $WGET -c -O $SBCACHEDIR/$b.tar.gz $SBSERVER/$i
+                 cp $SBCACHEDIR/$b.tar.gz .
+             else
+                 $WGET -c -O $b.tar.gz $SBSERVER/$i
+             fi
              tar xf $b.tar.gz
             (
              cd $b                                         
              source ./$b.info        
              LOCAL=$(basename $DOWNLOAD)
-             $WGET -c -O $LOCAL $DOWNLOAD
+             if [ -d $SCACHEDIR ]; then
+                 $WGET -c -O $SCACHEDIR/$LOCAL $DOWNLOAD
+		 cp $SCACHEDIR/$LOCAL .
+             else
+                 $WGET -c -O $LOCAL $DOWNLOAD
+             fi
 
              if [ "$(md5sum $LOCAL | awk '{print $1}')" != "$MD5SUM" ]; then 
                 echo "Checksums don't match. Did you run 'update' first?"
@@ -215,7 +249,13 @@
                 if [ "$ANS" != "c" ]; then exit 1; fi
             fi
             options=$(grep $b $QUEUE | cut -f2- | sed "s/$b//")
-            eval $options source ./$b.SlackBuild
+            # Deal with the specific edge case of when you want to build a
+            # specific .tar.gz
+            if [ -n $options ]; then
+                if [ "$options" = ".tar.gz" ]; then options=""; fi
+            fi
+
+ 	    eval $options source ./$b.SlackBuild
             if [ "$INSTALL" = "1" ]; then
                 $UP $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
             fi
@@ -258,7 +298,14 @@
 #{{{ Delete Cache !DANGER WILL ROBINSON!
 deletecache()
 {
-    rm -f $CACHEDIR/$FILELIST 
+    rm -f $CACHEDIR/$FILELIST
+    shift
+    arg=$*
+    if [ -n "$arg" ]; then
+        if [ "$arg" = "all" ]; then
+            rm -rf $CACHEDIR
+        fi
+    fi
     rm -rf $TMPROOT
     echo "Cache Deleted"
     cleanup
